package mysqlhandler

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/CanobbioE/reelo/backend/interfaces/repository"
	mysqldump "github.com/JamesStewy/go-mysqldump"
	mysql "github.com/go-sql-driver/mysql"
)

// Handler wraps a connection to a MySql database
type Handler struct {
	Conn *sql.DB
}

// Config represents a mysql configuration settings
type Config struct {
	DbDriver, User, Password, Host, DbName, BkpDir   string
	MaxConnections, MaxIdleConnections, MaxConnTries int
	ConnectionsLifetime                              time.Duration
	InstanceEsists                                   bool
}

// InitRepoHandler initialize the repository connection using the hardcoded
// values or the environments variables
func InitRepoHandler() (*Handler, error) {
	cfg := Config{
		DbDriver:            "mysql",
		User:                "reeloUser",
		Password:            "password",
		Host:                "localhost:3306",
		DbName:              "reelo",
		BkpDir:              "bkp",
		MaxConnections:      5,
		MaxIdleConnections:  5,
		MaxConnTries:        10,
		ConnectionsLifetime: (time.Minute * 5),
		InstanceEsists:      false,
	}
	if os.Getenv("ENV") == "prod" {
		cfg.DbDriver = os.Getenv("DB_DRIVER")
		cfg.User = os.Getenv("DB_USER")
		cfg.Password = os.Getenv("DB_USER")
		cfg.Host = os.Getenv("DB_HOST")
		cfg.BkpDir = os.Getenv("DB_BKP_PATH")
	}

	return NewHandler(cfg)
}

// NewHandler istanciates a connection to a mysql database
func NewHandler(cfg Config) (*Handler, error) {
	var handler *Handler

	dbConfig := mysql.NewConfig()
	dbConfig.User = cfg.User
	dbConfig.Passwd = cfg.Password
	dbConfig.Addr = cfg.Host
	dbConfig.DBName = cfg.DbName
	dbConfig.Net = "tcp"
	dataSourceName := dbConfig.FormatDSN()
	var tries int

	db, err := sql.Open(cfg.DbDriver, dataSourceName)
	if err != nil {
		return handler, err
	}
	db.SetMaxOpenConns(cfg.MaxConnections)
	db.SetMaxIdleConns(cfg.MaxIdleConnections)
	// db.SetConnMaxLifetime(connectionsLifetime)
	handler = &Handler{Conn: db}

	for tries <= cfg.MaxConnTries {
		if err := db.PingContext(context.Background()); err != nil {
			if tries == cfg.MaxConnTries {
				return handler, err
			}
			tries++
			time.Sleep(time.Duration(tries*100) * time.Millisecond)
		} else {
			break
		}
	}
	return handler, nil
}

// ExecContext performs a statement on the handler
func (h *Handler) ExecContext(ctx context.Context, stmt string) (repository.Result, error) {
	results, err := h.Conn.ExecContext(ctx, stmt)
	return Result{results}, err
}

// Query performs a query on the handler
func (h *Handler) Query(ctx context.Context, stmt string, args ...interface{}) (repository.Row, error) {
	rows, err := h.Conn.QueryContext(ctx, stmt, args...)
	return Row{rows}, err
}

// Backup exports the database into a file, it also closes the connection
// to the database. So you have to reopen it.
func (h *Handler) Backup(cfg Config) (filename string) {
	// accepts time layout string and add .sql at the end of file
	dumpFilenameFormat := fmt.Sprintf("%s-20060102T150405", cfg.DbName)

	// Register database with mysqldump
	dumper, err := mysqldump.Register(h.Conn, cfg.BkpDir, dumpFilenameFormat)
	if err != nil {
		log.Printf("Error registering databse: %v", err)
		return filename
	}
	// Close dumper and connected database
	defer dumper.Close()

	// Dump database to file
	filename, err = dumper.Dump()
	if err != nil {
		fmt.Println("Error dumping:", err)
		return filename
	}
	log.Printf("File is saved to %s", filename)
	return filename
}

// Row wraps sql results and implements interfaces/repository.Row
type Row struct {
	Rows *sql.Rows
}

// Scan copies the cilums from the matched row.
func (r Row) Scan(dest ...interface{}) error {
	return r.Rows.Scan(dest...)
}

// Next prepares the next result row for reading with the Scan method.
func (r Row) Next() bool {
	return r.Rows.Next()
}

// Close closses the Rows, preventing further enumeration.
func (r Row) Close() error {
	return r.Rows.Close()
}

// A Result summarizes an executed SQL command.
type Result struct {
	Results sql.Result
}

// LastInsertId returns the integer generated by the database
func (rs Result) LastInsertId() (int64, error) {
	return rs.Results.LastInsertId()
}

// RowsAffected returns the number of rows affected by an
// update, insert, or delete.
func (rs Result) RowsAffected() (int64, error) {
	return rs.Results.RowsAffected()
}
