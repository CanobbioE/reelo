package repository

import "context"

// DbHandler is a high level interface for repository interrogation
type DbHandler interface {
	ExecContext(ctx context.Context, stmt string) (Result, error)
	Query(ctx context.Context, stmt string, args ...interface{}) (Row, error)
}

// Row is a high level interface that allows repository's data manipulation
type Row interface {
	Scan(dest ...interface{}) error
	Next() bool
	Close() error
}

// A Result summarizes an executed SQL command.
type Result interface {
	// LastInsertId returns the integer generated by the database
	// in response to a command. Typically this will be from an
	// "auto increment" column when inserting a new row. Not all
	// databases support this feature, and the syntax of such
	// statements varies.
	LastInsertId() (int64, error)

	// RowsAffected returns the number of rows affected by an
	// update, insert, or delete. Not every database or database
	// driver may support this.
	RowsAffected() (int64, error)
}

// DbRepo represents a general repository.
// The handlers map lets every repository use any other repository
// respecting dependency injection
type DbRepo struct {
	dbHandlers map[string]DbHandler
	dbHandler  DbHandler
}
